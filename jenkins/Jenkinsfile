def mainDir="Part2_Docker/Chapter02/2-jenkins-docker"
def deployHost="172.32.0.4"


pipeline {
    agent any

    environment {
            AZURE_SUBSCRIPTION_ID='8100c487-3150-405f-b25d-d8e7c4df52c2'
            AZURE_TENANT_ID='7d49e97a-1b9b-4907-81aa-24ff1ddf0bda'
            CONTAINER_REGISTRY='sangunecr'
            RESOURCE_GROUP='Docker2'
            REPO="sangunecr.azurecr.io"
            IMAGE_NAME="jenkins-docker"
            TAG="tag"
        }

    stages {
        stage('Pull Codes from GitHub'){
            steps{
                git branch: 'main',
                credentialsId: 'Dev_VM_ssh-key',
                url: 'git@github.com:Sang-un/DevOps_Practice.git'
            }
            post{
                success {
                    echo "Successfully Cloned Repo"
                }
                always {
                    echo "I tried..."
                }
                cleanup {
                    echo "after all other post condition"
                }
            }
        }

        stage('Build Codes by Gradle'){
            steps{
                sh"""
                cd ${mainDir}
                ./gradlew clean build
                """
            }
        }

        stage('Build Docker Image by Jib & Push to Azure ACR'){
            steps{
                // sudo apt-get update
                // sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
                // curl -sL https://aka.ms/InstallAzureCLIDeb | bash

                withCredentials([usernamePassword(credentialsId: 'Azure_APP', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
                            sh 'az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID'
                            sh 'az account set -s $AZURE_SUBSCRIPTION_ID'
                            sh 'az acr login --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP'
                            // sh 'az acr build --image $REPO/$IMAGE_NAME:$TAG --registry $CONTAINER_REGISTRY --file Dockerfile . '
                            sh """
                            cd ${mainDir}
                            ./gradlew jib -Djib.to.image=${REPO}/${IMAGE_NAME}:${currentBuild.number} -Djib.console='plain'
                            """
                        }
            }
        }

        stage('Deploy to Azure VM'){
            steps{
                sshagent(credentials: ["deploy-key"]){
                    sh "ssh -o StrictHostKeyChecking=no deploy@${deployHost} \
                        'az acr login --name ${CONTAINER_REGISTRY}; \
                        docker run -d -p 80:8080 -t ${REPO}/${IMAGE_NAME}:${currentBuild.number};'"
                }
            }
        }


    }
}